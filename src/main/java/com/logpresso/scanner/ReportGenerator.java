package com.logpresso.scanner;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import com.logpresso.scanner.utils.IoUtils;

public class ReportGenerator {

	public static void writeReportFile(Configuration config, Map<File, List<ReportEntry>> fileReports, Metrics metrics) {
		if (!config.isReportCsv())
			return;

		if (config.isNoEmptyReport() && fileReports.isEmpty())
			return;

		File f = generateReportFileName(config);

		FileOutputStream fos = null;
		try {
			fos = new FileOutputStream(f);
			writeCsvReport(config, fileReports, fos);
		} catch (IOException e) {
			throw new IllegalStateException("cannot open csv report file: " + e.getMessage(), e);
		} finally {
			IoUtils.ensureClose(fos);
		}
	}

	private static File generateReportFileName(Configuration config) {
		SimpleDateFormat df = new SimpleDateFormat("yyyyMMdd_HHmmss");
		String ext = ".csv";

		File f = new File("log4j2_scan_report_" + df.format(new Date()) + ext);
		if (config.getReportPath() != null) {
			f = new File(config.getReportPath());

			// double check
			if (f.exists())
				throw new IllegalStateException("Cannot write report file. File already exists: " + f.getAbsolutePath());
		} else if (config.getReportDir() != null) {
			f = new File(config.getReportDir(), f.getName());

			// double check
			if (f.exists())
				throw new IllegalStateException("Cannot write report file. File already exists: " + f.getAbsolutePath());
		}

		return f;
	}

	private static void writeCsvReport(Configuration config, Map<File, List<ReportEntry>> fileReports, FileOutputStream csvStream)
			throws IOException, UnsupportedEncodingException {
		String header = String.format("Hostname,Path,Entry,Product,Version,CVE,Status,Fixed,Detected at%n");
		csvStream.write(header.getBytes("utf-8"));

		String hostname = getHostname(config.isDebug());
		if (hostname == null)
			hostname = "";

		for (File file : fileReports.keySet()) {
			for (ReportEntry entry : fileReports.get(file)) {
				String line = entry.getCsvLine();
				line = hostname + "," + line;
				csvStream.write(line.getBytes("utf-8"));
			}
		}
	}

	private static String getHostname(boolean debug) {
		// Try to fetch hostname without DNS resolving for closed network
		boolean isWindows = File.separatorChar == '\\';
		if (isWindows) {
			return System.getenv("COMPUTERNAME");
		} else {
			Process p = null;
			try {
				p = Runtime.getRuntime().exec("uname -n");
				BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));

				String line = br.readLine();
				return (line == null) ? null : line.trim();
			} catch (IOException e) {
				if (debug)
					e.printStackTrace();

				return null;
			} finally {
				if (p != null)
					p.destroy();
			}
		}
	}
}
