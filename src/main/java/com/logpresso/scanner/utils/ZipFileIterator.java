package com.logpresso.scanner.utils;

import java.io.Closeable;
import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.security.NoSuchAlgorithmException;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.util.zip.ZipInputStream;

import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

public class ZipFileIterator implements Closeable {

	private ZipFile zipFile;
	private ZipInputStream zis;
	private ZipArchiveInputStream commonsZis;
	private Enumeration<? extends ZipEntry> e;

	private ZipEntry firstEntry;
	private ZipEntry nextEntry;
	private HashingInputStream his;

	public ZipFileIterator(File file, Charset charset, HashingInputStream his) throws IOException {
		this.zipFile = new ZipFile(file, charset);
		this.his = his;
		e = zipFile.entries();
		if (e.hasMoreElements()) {
			firstEntry = e.nextElement();
			nextEntry = firstEntry;
		}
	}

	public ZipFileIterator(ZipInputStream zis, HashingInputStream his) throws IOException {
		this.zis = zis;
		this.his = his;
		firstEntry = zis.getNextEntry();
	}

	public ZipFileIterator(ZipArchiveInputStream zis, HashingInputStream his) throws IOException {
		this.commonsZis = zis;
		this.his = his;
		firstEntry = zis.getNextZipEntry();
	}

	public ZipEntry getNextEntry() throws IOException {
		if (firstEntry != null) {
			ZipEntry e = firstEntry;
			firstEntry = null;
			return e;
		}

		if (zipFile != null) {
			if (e.hasMoreElements()) {
				this.nextEntry = e.nextElement();
				return nextEntry;
			} else {
				return null;
			}
		} else if (zis != null) {
			this.nextEntry = zis.getNextEntry();
			return nextEntry;
		} else {
			this.nextEntry = commonsZis.getNextZipEntry();
			return nextEntry;
		}
	}

	public HashingInputStream getNextInputStream() throws IOException {
		try {
			if (zipFile != null) {
				return new HashingInputStream(zipFile.getInputStream(nextEntry), his.getAlgorithms());
			}
			else if (zis != null) {
				return new HashingInputStream(zis, his.getAlgorithms());
			}
			return new HashingInputStream(commonsZis, his.getAlgorithms());
		}
		catch( NoSuchAlgorithmException e ) {
			/*
			 * would have been thrown earlier
			 */
			AssertionError error = new AssertionError("Unable to get MessageDigest we already had previously?");
			error.initCause(e);
			throw error;
		}
	}

	@Override
	public void close() throws IOException {
		if (zipFile != null)
			zipFile.close();

		if (commonsZis != null)
			IoUtils.ensureClose(commonsZis);
	}

	public byte[] getFileHash(String algorithm){
		return this.his.getHash(algorithm);
	}
}
