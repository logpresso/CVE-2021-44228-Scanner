package com.logpresso.scanner.utils;

import java.io.*;
import java.security.*;
import java.util.*;
import java.util.Map.*;


/**
 * @author <a href="mailto:Alexander.Rathai@Materna.DE">Alexander Rathai</a>
 */
public class HashingInputStream extends FilterInputStream {

	private final HashMap<String, MessageDigest> digests = new HashMap<>();

	private final HashMap<String, byte[]> digested = new HashMap<>();

	/**
	 * @param in
	 * @throws NoSuchAlgorithmException
	 */
	public HashingInputStream(InputStream in, String ... algorithms) throws NoSuchAlgorithmException {
		super(in);
		for( String algorithm : algorithms ) {
			MessageDigest digest = MessageDigest.getInstance(algorithm);
			digests.put(algorithm, digest);
		}
	}


	/**
	 * @see java.io.FilterInputStream#read()
	 */
	@Override
	public int read() throws IOException {
		if( !digested.isEmpty() ) {
			throw new IOException("MessageDigests have already been reset: " + digested.entrySet().toString());
		}
		int i = super.read();
		if( i != -1 ) {
			byte b = (byte)i;
			for( Entry<String, MessageDigest> entry : digests.entrySet() ) {
				//				final String algorithm = entry.getKey();
				final MessageDigest digest = entry.getValue();
				digest.update(b);
			}
		}
		return i;
	}


	/**
	 * @see java.io.FilterInputStream#read(byte[], int, int)
	 */
	@Override
	public int read(byte[] b, int off, int len) throws IOException {
		if( !digested.isEmpty() ) {
			throw new IOException("MessageDigests have already been reset: " + digested.entrySet().toString());
		}
		int read = super.read(b, off, len);
		if( read != -1 ) {
			for( Entry<String, MessageDigest> entry : digests.entrySet() ) {
				//				final String algorithm = entry.getKey();
				final MessageDigest digest = entry.getValue();
				digest.update(b, off, read);
			}
		}
		return read;
	}


	public byte[] getHash(String algorithm) {
		byte[] bytes = digested.get(algorithm);
		if( bytes != null ) {
			return bytes;
		}
		MessageDigest digest = digests.get(algorithm);
		bytes = digest.digest();
		digested.put(algorithm, bytes);
		return bytes;
	}


	/**
	 * @see java.io.FilterInputStream#mark(int)
	 */
	@Override
	public synchronized void mark(int readlimit) {
		throw new UnsupportedOperationException("mark not supported");
	}


	/**
	 * @see java.io.FilterInputStream#markSupported()
	 */
	@Override
	public boolean markSupported() {
		return false;
	}


	/**
	 * @see java.io.FilterInputStream#reset()
	 */
	@Override
	public synchronized void reset() throws IOException {
		throw new UnsupportedOperationException("reset not supported");
	}


	public String[] getAlgorithms() {
		return this.digests.keySet().toArray(new String[this.digests.size()]);
	}
}